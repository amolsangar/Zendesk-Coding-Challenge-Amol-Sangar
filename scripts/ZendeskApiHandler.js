const axios = require('axios');
var Buffer = require('buffer/').Buffer

class ZendeskApiHandler {

    // =======================================================
    /* Parameters - 
    1. subdomain name of the account
    2. emailAddress of the user's account
    3. token generated by user for API usage */

    constructor(subdomain,emailAddress,token) {
        this.instance = axios.create({
            baseURL: `https://${subdomain}.zendesk.com/api/v2`
        });
        
        let auth_token_encoded = `Basic ${ Buffer.from(`${emailAddress}/token:${token}`).toString('base64') }`
        this.instance.defaults.headers.common['Authorization'] = auth_token_encoded;
    }

    // =======================================================
    /* Parameters - 
    1. page number (page)
    2. number of ticktes per page (per_page_size)
    
    @returns Promise */

    async getTicketsByPage(page, per_page_size) {
        let url = `/tickets.json?page=${page}&per_page=${per_page_size}`
        return this.getTickets(url)
    }

    // =======================================================
    /* @returns Promise */

    async getTickets(url = '/tickets.json') {
        return this.getRequest(url)
    }

    // =======================================================
    /* @returns Promise */

    async getTicketCount() {
        let url = `/tickets/count.json`
        return this.getRequest(url)
    }

    // =======================================================
    /* Parameters - 
    1. url - GET API url

    @returns Promise
    */
    async getRequest(url) {
        try {
            let response = await this.instance.get(url)
            let responseBody = response.data

            return responseBody
        }
        catch(response) {
            // BASIC ERROR HANDLING
            response = response.response
            if (response.status != 200) {
                switch (response.status) {
                    case 401:
                        throw { "status": response.status, "statusText": `${response.statusText} : Couldn't authenticate you`}
                    case 404:
                        throw { "status": response.status, "statusText": `${response.statusText} : Ticket not found`}
                    case 400:
                        throw { "status": response.status, "statusText": `${response.statusText} : Invalid Ticket Id`}
                    default:
                        throw { "status": 500, "statusText": `${response.statusText}`}
                }
            }
        }
    }
    
    // =======================================================
}

module.exports = ZendeskApiHandler